(in-package :squirl-demo)

(defclass springies-demo (demo)
  ((static-body :initarg :box :accessor static-body))
  (:default-initargs :name "Sproing twang!" :physics-timestep (float 1/60 1d0)))

(defstruct (springy-spring (:include damped-spring)
                           (:constructor
                            make-springy-spring
                            (body-a body-b anchor1 anchor2 rest-length stiffness damping))))

(defclass springy ()
  ((bodies :initarg :bodies :initform nil :accessor springy-bodies)))

(defmethod initialize-instance :after ((springy springy) &key)
  (dolist (body (springy-bodies springy))
    (setf (body-actor body) springy)))

(defcollision ((a springy) (b springy) contacts) (unless (eq a b) t))

(defun build-springies (world)
  (let ((springies nil))
    (flet ((springy (bar-coords-list)
             (make-instance 'springy
                            :bodies (loop for (x1 y1 x2 y2) in bar-coords-list
                                          collect (add-bar world (vec x1 y1) (vec x2 y2)))))
           (pivot-joint (k i j anchor1-x anchor1-y anchor2-x anchor2-y)
             (let ((bodies (springy-bodies (elt springies k))))
               (world-add-constraint world
                                     (make-pivot-joint (elt bodies i)
                                                       (elt bodies j)
                                                       (vec anchor1-x anchor1-y)
                                                       (vec anchor2-x anchor2-y))))))
      (setf springies
            (mapcar #'springy
                    '(((-240 160 -160 80)
                       (-160 80 -80 160))
                      ((0 160 80 0))
                      ((160 160 240 160))
                      ((-240 0 -160 -80)
                       (-160 -80 -80 0)
                       (-80 0 0 0))
                      ((0 -80 80 -80))
                      ((240 80 160 0)
                       (160 0 240 -80))
                      ((-240 -80 -160 -160)
                       (-160 -160 -80 -160))
                      ((0 -160 80 -160))
                      ((160 -160 240 -160)))))
      (pivot-joint 0 0 1 40 -40 -40 -40)
      (pivot-joint 3 0 1 40 -40 -40 -40)
      (pivot-joint 3 1 2 40 40 -40 0)
      (pivot-joint 5 0 1 -40 -40 -40 40)
      (pivot-joint 6 0 1 40 -40 -40  0)
      springies)))

(defun add-bar (world point-a point-b)
  (let* ((center (vec* (vec+ point-a point-b) 0.5d0))
         (length (vec-length (vec- point-a point-b)))
         (mass (/ length 160)))
    (world-add-body world
                    (make-body :mass mass
                               :inertia (* mass length (/ length 12))
                               :position center
                               :shapes (list (make-segment (vec- point-a center)
                                                           (vec- point-b center)
                                                           :radius 10))))))

(defun add-springs (world static-body springies &aux (sb static-body))
  (let ((bodies (mapcan (lambda (springy) (copy-list (springy-bodies springy))) springies))
        (stiffness 100)
        (damping 0.5))
    (flet ((con (body-a-or-n body-b anchor1-x anchor1-y anchor2-x anchor2-y)
             (world-add-constraint world (make-springy-spring
                                          (if (numberp body-a-or-n)
                                              (elt bodies (1- body-a-or-n))
                                              body-a-or-n)
                                          (elt bodies (1- body-b))
                                          (vec anchor1-x anchor1-y)
                                          (vec anchor2-x anchor2-y)
                                          0 stiffness damping))))
      ;; against static body
      (con sb 1 -320 240 -40 40)
      (con sb 1 -320 80 -40 40)
      (con sb 1 -160 240 -40 40)
      (con sb 2 -160 240 40 40)
      (con sb 2 0 240 40 40)
      (con sb 3 80 240 -40 80)
      (con sb 4 80 240 -40 0)
      (con sb 4 320 240 40 0)
      (con sb 5 -320 80 -40 40)
      (con sb 9 320 80 40 40)
      (con sb 10 320 0 40 -40)
      (con sb 10 320 -160 40 -40)
      (con sb 11 -320 -160 -40 40)
      (con sb 12 -240 -240 -40 0)
      (con sb 12 0 -240 40 0)
      (con sb 13 0 -240 -40 0)
      (con sb 13 80 -240 40 0)
      (con sb 14 80 -240 -40 0)
      (con sb 14 240 -240 40 0)
      (con sb 14 320 -160 40 0)
      ;; springy/springy
      (con 1 5 40 -40 -40 40)
      (con 1 6 40 -40 40 40)
      (con 2 3 40 40 -40 80)
      (con 3 4 -40 80 -40 0)
      (con 3 4 40 -80 -40 0)
      (con 3 7 40 -80 40 0)
      (con 3 7 -40 80 -40 0)
      (con 3 8 40 -80 40 0)
      (con 3 9 40 -80 -40 -40)
      (con 4 9 40 0 40 40)
      (con 5 11 -40 40 -40 40)
      (con 5 11 40 -40 40 -40)
      (con 7 8 40 0 -40 0)
      (con 8 12 -40 0 40 0)
      (con 8 13 -40 0 -40 0)
      (con 8 13 40 0 40 0)
      (con 8 14 40 0 -40 0)
      (con 10 14 40 -40 -40 0)
      (con 10 14 40 -40 -40 0))))

(defmethod init-demo ((demo springies-demo))
  (let ((world (make-world))
        (static-body (make-body)))
    (setf (static-body demo) static-body)
    (resize-world-active-hash world 30 999)
    (resize-world-static-hash world 200 99)
    (add-springs world static-body (build-springies world))
    world))

(provide-demo 'springies-demo)
